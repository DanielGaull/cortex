contract Iterator<T> {
    fn next(&mut this): T;
    fn hasNext(&this): bool;
}

struct ListWrapper<D> follows Iterator<D> {
    items: &mut list<D>,
    index: number,

    fn next(&mut this): D {
        let result = this.items[this.index];
        this.index += 1;
        result
    }
    fn hasNext(&this): bool {
        this.index < this.items.len()
    }
}

contract MapFn<T, R> {
    fn map(&this, item: T): R;
}

struct AddMapFn follows MapFn<number, number> {
    value: number,

    fn map(&this, item: number): number {
        item + this.value
    }
}

fn mapper<T, R>(iter: follows Iterator<T>, function: follows MapFn<T, R>): &mut list<R> {
    let result: &mut list<R> = [];
    while iter.hasNext() {
        let item = function.map(iter.next());
        result.add(item);
    }
    result
}
