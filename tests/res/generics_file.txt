fn identity<T>(item: T): T {
    item
}

struct Box<T> {
    item: T,

    fn get(&this): T {
        this.item
    }
    fn set(&mut this, value: T) {
        this.item = value;
    }

    fn identity<R>(&this, value: R): R {
        value
    }
}

fn readBox<T>(box: &Box<T>): T {
    box.get()
}

fn getFirst<T, R>(value: (T, R)): T {
    value.t0
}

struct MyArray<T: ty, N: int> {
    items: list<T>,

    fn len(&this): number {
        N
    }
}

fn makeArray<T: ty, N: int>(): &mut MyArray<T, N> {
    heap MyArray<T, N> {
        items: [],
    }
}
