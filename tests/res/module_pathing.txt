module Geometry {
    struct Point {
        x: i32,
        y: i32,
    }

    fn getPoint(x: i32, y: i32): Point {
        let result: Point = Point {
            x: x,
            y: y,
        };
        result
    }

    fn abs(n: i32): i32 {
        if n < 0 {
            -n
        } else {
            n
        }
    }
    fn taxiDist(p1: Point, p2: Point): i32 {
        abs(p2.x - p1.x) + abs(p2.y - p1.y)
    }

    struct Rectangle {
        c1: Point,
        c2: Point,
    }
    fn rect(x1: i32, y1: i32, x2: i32, y2: i32): Rectangle {
        Rectangle {
            c1: Point {
                x: x1,
                y: y1,
            },
            c2: Point {
                x: x2,
                y: y2,
            },
        }
    }
}

fn testFn(x1: i32, y1: i32, x2: i32, y2: i32): i32 {
    let rect: Geometry::Rectangle = Geometry::rect(x1, y1, x2, y2);
    let dist = Geometry::taxiDist(rect.c1, rect.c2);
    let rect2 = Geometry::Rectangle {
        c1: Geometry::Point {
            x: 0, y: 0,
        },
        c2: Geometry::Point {
            x: 0, y: 0
        },
    };
    rect2.c1 = Geometry::Point {
        x: 0, y: 0,
    };
    rect2.c1.x = 5;
    dist
}

module BGeometry {
    struct Point {
        x: i32,
        y: i32,

        fn taxiDist(&this, other: &Point): i32 {
            this.taxiDistHelper(other)
        }
        fn taxiDistHelper(&this, other: &Point): i32 {
            abs(other.x - this.x) + abs(other.y - this.y)
        }
    }

    fn getPoint(x: i32, y: i32): &mut Point {
        let result: &mut Point = heap Point {
            x: x,
            y: y,
        };
        result
    }

    fn abs(n: i32): i32 {
        if n < 0 {
            -n
        } else {
            n
        }
    }

    struct Rectangle {
        c1: &mut Point,
        c2: &mut Point,
    }
    fn rect(x1: i32, y1: i32, x2: i32, y2: i32): &mut Rectangle {
        heap Rectangle {
            c1: heap Point {
                x: x1,
                y: y1,
            },
            c2: heap Point {
                x: x2,
                y: y2,
            },
        }
    }
}

fn btestFn(x1: i32, y1: i32, x2: i32, y2: i32): i32 {
    let rect: &BGeometry::Rectangle = BGeometry::rect(x1, y1, x2, y2);
    let rectc1: &BGeometry::Point = rect.c1;
    let dist = rect.c1.taxiDist(rect.c2);
    let rect2 = heap BGeometry::Rectangle {
        c1: heap BGeometry::Point {
            x: 0, y: 0,
        },
        c2: heap BGeometry::Point {
            x: 0, y: 0
        },
    };
    rect2.c1 = heap BGeometry::Point {
        x: 0, y: 0,
    };
    rect2.c1.x = 5;
    dist
}

