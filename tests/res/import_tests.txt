import mylib;
import drawing::Point as DrawPoint;

// Should just return the value that came into it
fn doBox(v: number): number {
    let box = getBox(v);
    box.get()
}

fn doBox2(v: number): number {
    let box: &mylib::LibBox<number> = getBox(v);
    readBox(box)
}

fn numWrapper(v: number): number {
    let a: follows AFunc = heap NumWrapper { value: 5 };
    a.a(v)
}

/*

fn hello(): string {
    "hello".stringIdentity()
}

// Again, returns what was passed into it in a roundabout way
fn doPoint(x: number, y: number): (number, number) {
    let p = heap DrawPoint {
        coords: (x, y),
    };
    (p.getX(), p.getY())
}

*/
