COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ (!"\n" ~ ANY)*) }
WHITESPACE = _{ " " | "\n" | "\t" | "\r" }

program = { SOI ~ topLevel* ~ EOI }

// Top-level
topLevel = { import | function | struct | bundle | module }
module = { "module" ~ ident ~ "{" ~ topLevel* ~ "}" }
import = { "import" ~ (ident | string) ~ ";" }
function = { "fn" ~ optIdentifier ~ ("<" ~ typeArgList ~ ">")? ~ "(" ~ paramList ~ ")" ~ (":" ~ typ)? ~ "{" ~ body ~ "}" }
struct = { "struct" ~ optIdentifier ~ ("<" ~ typeArgList ~ ">")? ~ "{" ~ paramList ~ "}" }
bundle = { "bundle" ~ optIdentifier ~ ("<" ~ typeArgList ~ ">")? ~ "{" ~ paramList ~ bundleFuncList ~ "}" }

// Statements
statementNeedingSemicolon = _{ (throw | break | continue | varDec | indexVarAssign | varAssign | expr) }
statement = { (statementNeedingSemicolon ~ ";") | while }

throw = { "throw" ~ expr }
break = { "break" }
continue = { "continue" }

varDec = { ("let" | "const") ~ optIdentifier ~ (":" ~ typ)? ~ "=" ~ expr }
varAssign = { identExpr ~ arithLogicBinOp? ~ "=" ~ expr }
indexVarAssign = { identExpr ~ "[" ~ exprList ~ "]" ~ arithLogicBinOp? ~ "=" ~ expr }

while = { "while" ~ expr ~ "{" ~ body ~ "}" }

// Expressions
atom = { number | boolean | none | void | string | listLiteral | call | structConstruction | if | pathIdent | unOpAtom | "(" ~ expr ~ ")" }
exprTail = { postfixBangTail | memberCallTail | memberAccessTail | indexTail | "" }

primary = { atom ~ exprTail }
mulResult = { primary ~ ((mul | div | rem) ~ primary)* }
sumResult = { mulResult ~ ((add | sub) ~ mulResult)* }
eqResult = { sumResult ~ ((eq | neq | lte | gte | lt | gt) ~ sumResult)* }
logicResult = _{ eqResult ~ ((and | or) ~ eqResult)* }
expr = { logicResult }

call = { pathIdent ~ ("<" ~ typeList ~ ">")? ~ "(" ~ exprList ~ ")" }
structConstruction = { pathIdent ~ ("<" ~ typeList ~ ">")? ~ "{" ~ (structMemberInit ~ ",")* ~ structMemberInit? ~ "}" }
structMemberInit = { ident ~ ":" ~ expr }

postfixBangTail = { ("!" ~ !"=") ~ exprTail }
memberAccessTail = { "." ~ ident ~ exprTail }
memberCallTail = { "." ~ ident ~ ("<" ~ typeList ~ ">")? ~ "(" ~ exprList ~ ")" ~ exprTail }
indexTail = { "[" ~ exprList ~ "]" ~ exprTail }

if = { "if" ~ expr ~ "{" ~ body ~ "}" ~ elifs ~ else? }
elifs = { elif* }
elif = { "elif" ~ expr ~ "{" ~ body ~ "}" }
else = { "else" ~ "{" ~ body ~ "}" }

negate = { "-" }
invert = { "!" }
unOp = _{ negate | invert }
unOpAtom = { unOp ~ expr }

// Literals/Primitives
number = @{ ("+" | "-")? ~ (ASCII_DIGIT)+ ~ ("." ~ (ASCII_DIGIT)+)? }
boolean = { "true" | "false" }
none = { "none" }
void = { "void" }
listLiteral = { "[" ~ exprList ~ "]" }
// tuple = { "(" ~ expr ~ "," ~ exprList ~ ")" }

string = ${ "\"" ~ strinner ~ "\"" }
strinner = @{ strchar* }
strchar = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

optIdentifier = { ident | "~" }
ident = ${ ("_" | ASCII_ALPHA) ~ (ASCII_ALPHANUMERIC | "_")* }
pathIdent = { (ident ~ "::")* ~ ident }
identExpr = { ident ~ ("." ~ ident)* }

typ = { (basicType | refType) ~ "?"? }
refType = { ("&mut" | "&") ~ typ }
basicType = { pathIdent ~ ("<" ~ typeList ~ ">")? }

// Useful utilities
param = { ident ~ ":" ~ typ }
paramList = { (param ~ ",")* ~ param? }
exprList = { (expr ~ ",")* ~ expr? }
body = { statement* ~ expr? }

this = { "&this" }
mutThis = { "&mut this" }
bundleParamList = { ("," ~ param)* }
bundleFunction = { "fn" ~ optIdentifier ~ ("<" ~ typeArgList ~ ">")? ~ "(" ~ (this | mutThis) ~ bundleParamList ~ ")" ~ (":" ~ typ)? ~ "{" ~ body ~ "}" }
bundleFuncList = { bundleFunction* }

typeArgList = { (ident ~ ",")* ~ ident }
typeList = { (typ ~ ",")* ~ typ }

// Operator utilities
add = { "+" }
sub = { "-" }
mul = { "*" }
div = { "/" }
rem = { "%" }
and = { "&&" }
or = { "||" }
eq = { "==" }
neq = { "!=" }
lt = { "<" }
lte = { "<=" }
gt = { ">" }
gte = { ">=" }
arithLogicBinOp = { add | sub | mul | div | rem | and | or }
