COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ (!"\n" ~ ANY)*) }
WHITESPACE = _{ " " | "\n" | "\t" | "\r" }

program = { SOI ~ topLevel* ~ EOI }

// Top-level
topLevel = { import | function | module }
module = { "module" ~ ident ~ "{" ~ topLevel* ~ "}" }
import = { "import" ~ (ident | string) ~ ";" }
function = { "fn" ~ optIdentifier ~ "(" ~ paramList ~ ")" ~ ":" ~ typ ~ "{" ~ body ~ "}" }
struct = { "struct" ~ optIdentifier ~ "{" ~ paramList ~ "}" }

// Statements
statementNeedingSemicolon = _{ (stop | varDec | varAssign | expr) }
statement = { statementNeedingSemicolon ~ ";" }

stop = { "stop" }

varDec = { ("let" | "const") ~ optIdentifier ~ (":" ~ typ)? ~ "=" ~ expr }
varAssign = { pathIdent ~ arithLogicBinOp? ~ "=" ~ expr }

// Expressions
atom = { number | boolean | null | void | string | call | pathIdent | if | "(" ~ expr ~ ")" }
exprTail = { "" }

primary = { atom ~ exprTail }
mulResult = { primary ~ ((mul | div | rem) ~ primary)* }
sumResult = { mulResult ~ ((add | sub) ~ mulResult)* }
eqResult = { sumResult ~ ((eq | neq | lte | gte | lt | gt) ~ sumResult)* }
logicResult = _{ eqResult ~ ((and | or) ~ eqResult)* }
expr = { logicResult }

call = { pathIdent ~ "(" ~ exprList ~ ")" }
structConstruction = { pathIdent ~ "{" ~ (structMemberInit ~ ",")* ~ structMemberInit? ~ "}" }

// NOTE: if the else is missing, and the first block returns a value, then the if will return null
if = { "if" ~ expr ~ "{" ~ body ~ "}" ~ elifs ~ else? }
elifs = { elif* }
elif = { "elif" ~ expr ~ "{" ~ body ~ "}" }
else = { "else" ~ "{" ~ body ~ "}" }

// Literals/Primitives
number = @{ ("+" | "-")? ~ (ASCII_DIGIT)+ ~ ("." ~ (ASCII_DIGIT)+)? }
boolean = { "true" | "false" }
null = { "null" }
void = { "void" }

string = ${ "\"" ~ strinner ~ "\"" }
strinner = @{ strchar* }
strchar = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

optIdentifier = { ident | "~" }
ident = ${ ("_" | ASCII_ALPHA) ~ (ASCII_ALPHANUMERIC | "_")* }
pathIdent = { (ident ~ "::")* ~ ident }

typ = { ident ~ "?"? }

// Useful utilities
param = { ident ~ ":" ~ typ }
paramList = { (param ~ ",")* ~ param? }
exprList = _{ (expr ~ ",")* ~ expr? }
body = { statement* ~ expr? }
structMemberInit = { ident ~ ":" ~ expr }

// Operator utilities
add = { "+" }
sub = { "-" }
mul = { "*" }
div = { "/" }
rem = { "%" }
and = { "&&" }
or = { "||" }
eq = { "==" }
neq = { "!=" }
lt = { "<" }
lte = { "<=" }
gt = { ">" }
gte = { ">=" }
arithLogicBinOp = { add | sub | mul | div | rem | and | or }
