COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ (!"\n" ~ ANY)*) }
WHITESPACE = _{ " " | "\n" | "\t" | "\r" }

program = { SOI ~ import* ~ topLevel* ~ EOI }

// Top-level
topLevel = { import | function | struct | extension | contract | module }
module = { "module" ~ ident ~ "{" ~ topLevel* ~ "}" }
import = { "import" ~ importEntry ~ ("," ~ importEntry)* ~ ";" }
function = { "fn" ~ optIdentifier ~ ("<" ~ typeParamList ~ ">")? ~ "(" ~ paramList ~ ")" ~ (":" ~ typ)? ~ "{" ~ body ~ "}" }
struct = { "struct" ~ ident ~ ("<" ~ typeParamList ~ ">")? ~ followsClause? ~ "{" ~ paramList ~ memberFuncList ~ "}" }
extension = { "extend" ~ pathIdent ~ followsClause? ~ "{" ~ memberFuncList ~ "}" }
contract = { "contract" ~ ident ~ ("<" ~ typeParamList ~ ">")? ~ "{" ~ (memberFunctionSignature ~ ";")* ~ "}" }

// Statements
statementNeedingSemicolon = _{ (throw | break | continue | tupleVarDec | varDec | indexVarAssign | tupleVarAssign | varAssign | expr) }
statement = { (statementNeedingSemicolon ~ ";") | while }

throw = { "throw" ~ expr? }
break = { "break" }
continue = { "continue" }

let = { "let" }
const = { "const" }
varDec = { (let | const) ~ optIdentifier ~ (":" ~ typ)? ~ "=" ~ expr }
tupleVarDec = { (let | const) ~ tupleVarDecName ~ (":" ~ typ)? ~ "=" ~ expr }
tupleVarDecName = { "(" ~ varDecName ~ "," ~ (varDecName ~ ("," ~ varDecName)*)? ~ ")" }
varDecName = { tupleVarDecName | optIdentifier }

varAssign = { identExpr ~ arithLogicBinOp? ~ "=" ~ expr }
tupleVarAssign = { tupleAssign ~ "=" ~ expr }
indexVarAssign = { identExpr ~ "[" ~ exprList ~ "]" ~ arithLogicBinOp? ~ "=" ~ expr }

while = { "while" ~ expr ~ "{" ~ body ~ "}" }

// Expressions
atom = { range | number | boolean | none | void | string | char | tuple | listLiteral | call | construction | if | pathIdent | unOpAtom | heapExp | "(" ~ expr ~ ")" }
exprTail = { postfixBangTail | memberCallTail | memberAccessTail | indexTail | "" }

primary = { atom ~ exprTail }
mulResult = { primary ~ ((mul | div | rem) ~ primary)* }
sumResult = { mulResult ~ ((add | sub) ~ mulResult)* }
eqResult = { sumResult ~ ((eq | neq | lte | gte | lt | gt) ~ sumResult)* }
logicResult = _{ eqResult ~ ((and | or) ~ eqResult)* }
expr = { logicResult }

call = { pathIdent ~ ("<" ~ typeArgList ~ ">")? ~ "(" ~ exprList ~ ")" }
heapExp = { "heap" ~ expr }
construction = { pathIdent ~ ("<" ~ typeArgList ~ ">")? ~ "{" ~ (memberInit ~ ",")* ~ memberInit? ~ "}" }
memberInit = { ident ~ ":" ~ expr }

postfixBangTail = { ("!" ~ !"=") ~ exprTail }
memberAccessTail = { "." ~ ident ~ exprTail }
memberCallTail = { "." ~ ident ~ ("<" ~ typeArgList ~ ">")? ~ "(" ~ exprList ~ ")" ~ exprTail }
indexTail = { "[" ~ exprList ~ "]" ~ exprTail }

if = { "if" ~ expr ~ "{" ~ body ~ "}" ~ elifs ~ else? }
elifs = { elif* }
elif = { "elif" ~ expr ~ "{" ~ body ~ "}" }
else = { "else" ~ "{" ~ body ~ "}" }

negate = { "-" }
invert = { "!" }
deref = { "@" }
unOp = _{ negate | invert | deref }
unOpAtom = { unOp ~ expr }

// Literals/Primitives
identChar = _{ (ASCII_ALPHANUMERIC | "_") }
int = @{ ("+" | "-")? ~ (ASCII_DIGIT)+ }
number = @{ ("+" | "-")? ~ (ASCII_DIGIT)+ ~ ("." ~ (ASCII_DIGIT)+)? }
boolean = { ("true" | "false") ~ !identChar }
none = { "none" ~ !identChar }
void = { "void" ~ !identChar }
listLiteral = { "[" ~ exprList ~ "]" }
tuple = { "(" ~ expr ~ "," ~ expr? ~ ("," ~ expr)* ~ ")" }

rangeVal = { int | "" }
range = { rangeVal ~ ":" ~ rangeVal ~ (":" ~ rangeVal)? }

char = @{ "\'" ~ charinner ~ "\'" }
charinner = ${ strchar }

string = ${ "\"" ~ strinner ~ "\"" }
strinner = @{ strchar* }
strchar = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\'" | "\\" | "n" | "r" | "t" | "0")
    // | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

optIdentifier = { ident | ignoredIdentifier }
ignoredIdentifier = { "~" }
keyword = _{ "let" | "const" | "follows" | "struct" | "contract" | "extend" | "module" | "fn" | "heap" |
    "throw" | "break" | "continue" | "return" | "while" | "if" | "elif" | "else" | "for" | "true" | "false" }
ident = ${ !(keyword ~ !identChar) ~ ("_" | ASCII_ALPHA) ~ (ASCII_ALPHANUMERIC | "_")* }
pathIdent = { (ident ~ "::")* ~ ident }
identExpr = { ident ~ ("." ~ ident)* }
tupleAssign = { "(" ~ assignName ~ "," ~ (assignName ~ ("," ~ assignName)*)? ~ ")" }
assignName = { tupleAssign | identExpr | ignoredIdentifier }

typ = { atomType ~ typeTail }
atomType = _{ basicType | tupleType | followsType | refType | "(" ~ typ ~ ")" }
typeTail = { optionalTail | "" }
refType = { ("&mut" | "&") ~ typ }
basicType = { pathIdent ~ ("<" ~ typeArgList ~ ">")? }
tupleType = { "(" ~ typ ~ "," ~ typ? ~ ("," ~ typ)* ~ ")" }
followsType = { followsClause }
optionalTail = { "?" }

typeParam = { ident ~ (": " ~ (typeParamTy | typeParamInt))? }
typeParamTy = { "ty" }
typeParamInt = { "int" }
typeArg = _{ typ | int }

// Useful utilities
param = { ident ~ ":" ~ typ }
paramList = { (param ~ ",")* ~ param? }
exprList = { (expr ~ ",")* ~ expr? }
body = { statement* ~ expr? }

followsClause = { "follows" ~ (followsEntry ~ "+")* ~ followsEntry }
followsEntry = { pathIdent ~ ("<" ~ typeArgList ~ ">")? }

directThis = { "this" }
refThis = { "&this" }
refMutThis = { "&mut this" }

memberParamList = { ("," ~ param)* }
memberFunctionSignature = { "fn" ~ optIdentifier ~ ("<" ~ typeParamList ~ ">")? ~ "(" ~ (directThis | refThis | refMutThis) ~ memberParamList ~ ")" ~ (":" ~ typ)? }
memberFunction = { memberFunctionSignature ~ "{" ~ body ~ "}" }
memberFuncList = { memberFunction* }

typeParamList = { (typeParam ~ ",")* ~ typeParam }
typeArgList = { (typeArg ~ ",")* ~ typeArg }

importEntry = { pathIdent } // ~ ("as" ~ ident)? }

// Operator utilities
add = { "+" }
sub = { "-" }
mul = { "*" }
div = { "/" }
rem = { "%" }
and = { "&&" }
or = { "||" }
eq = { "==" }
neq = { "!=" }
lt = { "<" }
lte = { "<=" }
gt = { ">" }
gte = { ">=" }
arithLogicBinOp = { add | sub | mul | div | rem | and | or }
